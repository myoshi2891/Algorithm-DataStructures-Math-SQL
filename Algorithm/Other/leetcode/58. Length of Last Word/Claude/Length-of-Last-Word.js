// この問題は文字列の最後の単語の長さを求める問題ですね。効率的な解法を考えてみます。この解法は以下の特徴があります：

// **アプローチ:**
// - 文字列の末尾から逆方向に走査して、最後の単語を特定
// - まず末尾のスペースをスキップし、その後単語の文字をカウント

// **時間計算量:** O(n) - 最悪の場合、文字列全体を走査する必要がある
// **空間計算量:** O(1) - 定数の追加メモリのみ使用

// **効率性のポイント:**
// 1. `split()`や`trim()`などの配列操作を避けることで、メモリ使用量を最小化
// 2. 末尾から走査することで、多くの場合に文字列全体を見る必要がない
// 3. 単純なループ処理で実装が軽量

// この実装は制約条件（文字列長が最大10^4）に対して十分効率的で、LeetCodeでの実行時間とメモリ使用量の両方を最適化しています。

/**
 * 文字列の最後の単語の長さを返す関数
 * @param {string} s - 英字とスペースで構成された文字列
 * @return {number} - 最後の単語の長さ
 */
var lengthOfLastWord = function (s) {
    // 文字列の末尾から開始して、スペースをスキップ
    let i = s.length - 1;

    // 末尾のスペースをスキップ
    while (i >= 0 && s[i] === ' ') {
        i--;
    }

    // 最後の単語の長さをカウント
    let length = 0;
    while (i >= 0 && s[i] !== ' ') {
        length++;
        i--;
    }

    return length;
};
