# 承知しました。以下は、LeetCode形式に完全準拠した **Python（3.11.4）による「回文判定」関数の実装**です。
# 文字列変換を使わず、処理時間・メモリ使用量にも配慮した解法です。

# ## ✅ 問題文要約

# > 整数 `x` が与えられたとき、それが回文であるなら `True` を、そうでなければ `False` を返してください。
# > **ただし、文字列変換を使わない実装が推奨されます。**

# ## ✅ 実装：LeetCode形式（Python + 型ヒント + 最適化）

class Solution:
    def isPalindrome(self, x: int) -> bool:
        # 負数や末尾0（0を除く）は回文にはなり得ない
        if x < 0 or (x % 10 == 0 and x != 0):
            return False

        reverted: int = 0
        while x > reverted:
            reverted = reverted * 10 + x % 10
            x //= 10

        # 偶数桁: x == reverted、奇数桁: x == reverted // 10
        return x == reverted or x == reverted // 10

# ## ✅ 処理の説明（Follow-up 条件満たす）

# | ステップ   | 説明                                                    |
# | ------ | ----------------------------------------------------- |
# | 入力前処理  | 負数または末尾が0の数値（0は除く）は絶対に回文にならない                         |
# | 数値反転処理 | `x` の後半部分だけを `reverted` に反転しながら保持                     |
# | 判定     | `x == reverted` または `x == reverted // 10` で中央の桁を除いた比較 |


# ## ✅ 時間計算量・メモリ使用量

# | 項目         | 内容                                       |
# | ---------- | ---------------------------------------- |
# | **時間計算量**  | O(log₁₀x) → 桁数分だけループ（最大で10回程度）           |
# | **空間計算量**  | O(1) → 変数 `x`, `reverted` の2つ（定数個）しか使わない |
# | **使用メモリ例** | 約 16〜24 bytes（整数2個、内部処理含む）               |


# ## ✅ 動作例（内部での動き）

# 例: `x = 1221`

# | 反転途中 | x                    | reverted |
# | ---- | -------------------- | -------- |
# | 1回目  | 122                  | 1        |
# | 2回目  | 12                   | 12       |
# | 判定   | 12 == 12 → True（偶数桁） |          |


# ## ✅ メリットと特徴

# * 🚫 `str()`や`[::-1]`などの文字列操作を一切使わない
# * 🚀 速度も空間効率も非常に良い
# * 💯 LeetCodeの「Follow up」条件も完全クリア

