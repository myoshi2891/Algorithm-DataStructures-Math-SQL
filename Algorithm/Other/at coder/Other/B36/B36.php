<!-- 以下は、**PHP 8.2.8 向け**に書いた解答です。
電球の状態文字列 `S` を解析し、ちょうど `K` 個の電球をONにできるか判定する処理を関数化し、**型の明示**, **処理時間・メモリ量への配慮**, **コメント付き**で解説しています。

---

## ✅ PHP 解法（ランタイム・メモリ最適化済）

<?php
declare(strict_types=1);

/**
 * 指定の状態にできるかどうかを判定する関数
 *
 * @param int $n 電球の個数 (2 <= n <= 300000)
 * @param int $k 最終的にONにしたい電球の数 (0 <= k <= n)
 * @param string $s 初期状態の電球列（長さnの '0'/'1' のみ）
 * @return string 'Yes' または 'No'
 */
function canMakeKOn(int $n, int $k, string $s): string
{
    $count1 = 0;

    // O(N) で '1' の数を数える（ONの電球数）
    for ($i = 0; $i < $n; $i++) {
        if ($s[$i] === '1') {
            $count1++;
        }
    }

    // 差が偶数なら操作でちょうどK個ONにできる
    $diff = abs($count1 - $k);
    return $diff % 2 === 0 ? 'Yes' : 'No';
}

// ---------- 入力処理（AtCoder標準形式に対応） ----------
$line1 = trim(fgets(STDIN));   // 1行目: N K
$line2 = trim(fgets(STDIN));   // 2行目: 状態文字列 S

[$n, $k] = array_map('intval', explode(' ', $line1));
$s = $line2;

// ---------- 判定・出力 ----------
echo canMakeKOn($n, $k, $s) . PHP_EOL;

// ## ✅ 処理性能

// | 項目         | 値                      |
// | ---------- | ---------------------- |
// | 時間計算量      | O(N) （最大で N = 300,000） |
// | 空間計算量      | O(1)（固定変数のみ、\$s は参照）   |
// | 実行時間（想定）   | 数十ms（PHP8.2.8 CLI環境）   |
// | メモリ使用量（想定） | 数MB（主に文字列1つ分）          |

// ---

// ## ✅ 入力例と出力

// ```
// 入力:
// 7 3
// 1010111

// 出力:
// Yes
// ```

// ---

// ## ✅ 補足：どこが軽量・最適化されているか

// | 最適化点                                | 説明                                                 |
// | ----------------------------------- | -------------------------------------------------- |
// | `fgets(STDIN)`                      | 標準入力に高速対応（`file_get_contents('php://stdin')` より安定） |
// | `array_map('intval', explode(...))` | 整数変換を高速かつ型安全に                                      |
// | `for` + 文字比較                        | `substr_count()` より軽量、メモリ少                         |

// ---

// ## ✅ 動作確認（ローカルでのテスト）

// 以下のようなスクリプト `solution.php` を作成し：

// ```bash
// echo -e "7 3\n1010111" | php solution.php
// # 出力: Yes
// ```

// ---

// ご希望があれば、以下のような拡張も可能です：

// * **複数ケース対応**
// * **操作シミュレーション付き出力**
// * **エラーハンドリング付きバリデーション**

// 必要であればお知らせください。